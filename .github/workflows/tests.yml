name: Tests

on:
  pull_request: ~
  push:
    branches: [ main ]

  # Allow job to be triggered manually.
  workflow_dispatch:

# Cancel in-progress jobs when pushing to the same branch.
concurrency:
  cancel-in-progress: true
  group: ${{ github.workflow }}-${{ github.ref }}

jobs:

  tests:

    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: ["ubuntu-latest"]
        python-version: ["3.8", "3.12"]
        influxdb-version: [ "2.6", "2.7" ]
      fail-fast: false

    # https://docs.github.com/en/actions/using-containerized-services/about-service-containers
    services:

      influxdb:
        image: influxdb:${{ matrix.influxdb-version }}
        ports:
          - 8083:8083
          - 8086:8086
        env:
          DOCKER_INFLUXDB_INIT_MODE: setup
          DOCKER_INFLUXDB_INIT_USERNAME: admin
          DOCKER_INFLUXDB_INIT_PASSWORD: secret1234
          DOCKER_INFLUXDB_INIT_ORG: example
          DOCKER_INFLUXDB_INIT_BUCKET: default
          DOCKER_INFLUXDB_INIT_ADMIN_TOKEN: token

      cratedb:
        image: crate/crate:nightly
        ports:
          - 4200:4200
        env:
          CRATE_HEAP_SIZE: 1g

      postgresql:
        image: postgres:16
        ports:
          - 5432:5432
        env:
          POSTGRES_HOST_AUTH_METHOD: trust

    env:
      OS: ${{ matrix.os }}
      PYTHON: ${{ matrix.python-version }}

    name: "
    Python ${{ matrix.python-version }},
    InfluxDB ${{ matrix.influxdb-version }},
    OS ${{ matrix.os }}"
    steps:

    - name: Acquire sources
      uses: actions/checkout@v3

    # Install InfluxDB CLI tools.
    - name: Set up InfluxDB CLI
      uses: influxdata/influxdb-action@v3
      with:
        influxdb_version: 2.6.1
        influxdb_start: false

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        architecture: x64
        cache: 'pip'
        cache-dependency-path: 'pyproject.toml'

    - name: Set up project
      run: |

        # `setuptools 0.64.0` adds support for editable install hooks (PEP 660).
        # https://github.com/pypa/setuptools/blob/main/CHANGES.rst#v6400
        pip install "setuptools>=64" --upgrade

        # Install package in editable mode.
        pip install --use-pep517 --prefer-binary --editable=.[test,develop]

    - name: Run linter and software tests
      run: |
        poe check

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
      with:
        files: ./coverage.xml
        flags: unittests
        env_vars: OS,PYTHON
        name: codecov-umbrella
        fail_ci_if_error: true
